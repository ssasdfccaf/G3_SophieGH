package com.example.firebasetest.g3.Auth

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.telecom.Call
import android.content.Context
import android.content.Intent

import android.util.Log
import com.example.firebasetest.g3.R
import com.example.firebasetest.g3.databinding.ActivityRegisterBinding
import com.example.firebasetest.g3.model.LoginDto
import com.example.firebasetest.g3.model.User
import com.google.android.gms.common.api.Response


// 파이어베이스
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase


// 레트로핏
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.util.HashMap
import javax.security.auth.callback.Callback



class ResisterActivity : AppCompatActivity() {

    lateinit var binding: ActivityRegisterBinding

    private fun LoginDto(username: String, password: String) {

    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)


        // view binding
        binding = ActivityRegisterBinding.inflate(layoutInflater)
        setContentView(binding.root)
//        setContentView(R.layout.activity_register)


// FirebaseDatabase
        private val fireDatabase = FirebaseDatabase.getInstance().reference

        binding.loginBtn.setOnClickListener {
            var loginDto = LoginDto(
                username = binding.loginEmailEt.text.toString(),
                password = binding.loginPassEt.text.toString()
            )
        }


        val networkService = (applicationContext as MyApplication).networkService
        var userInsertCall = networkService.login(loginDto)
        Log.d("sy", loginDto.toString())
        userInsertCall.enqueue(object : Callback<LoginDto> {
            override fun onResponse(call: Call<LoginDto>, response: Response<LoginDto>) {
                Log.d("sy", response.toString())
                if (response.isSuccessful) {
                    val header = response.headers()
                    val auth = header.get("Authorization")
                    Log.d("sy", auth.toString())

                    val username = response.body()?.username.toString()
                    val password = response.body()?.password.toString()

                    Log.d("sy", "login=======$username")
                    val loginSharedPref =
                        getSharedPreferences("login_prof", Context.MODE_PRIVATE)
                    loginSharedPref.edit().run {
                        putString("Authorization", auth)
                        putString("username", username)
                        putString("password", password)
                        commit()
                    }

                    val database = Firebase.database
                    val myRef = database.getReference("username")

                    myRef.setValue(username)

                    var oneUserCall = networkService.doGetOneUser(username)
                    oneUserCall.enqueue(object : Callback<User> {
                        override fun onResponse(call: Call<User>, response: Response<User>) {
                            val user = response.body()

                            Log.d("test", "loginUser======================$user")

                            fireDatabase.child("users").child(username.toString())
                                .addListenerForSingleValueEvent(object :
                                    ValueEventListener {
                                    override fun onCancelled(error: DatabaseError) {
                                    }


                                    override fun onDataChange(snapshot: DataSnapshot) {
                                        var check = 0
                                        var inUsername: String
                                        for (data in snapshot.children) {
                                            Log.d("sy", "data.....$data")
                                            Log.d("sy", "key...........${data.children}")

                                            var item = data.getValue() as HashMap<String, Any?>
                                            inUsername = item.get("username").toString()

                                            if (inUsername == username) {
                                                check = 1
                                            }
                                        }
                                    }
                                }
                            )
                        }
                    }

                    )
                }
            }
        }

        )
    }
}




